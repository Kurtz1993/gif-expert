{"version":3,"sources":["components/AddCategory.tsx","models/gif-info.model.ts","helpers/get-gifs.helper.ts","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/use-fetch-gifs.hook.ts","GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifInfo","args","id","title","url","this","images","downsized_medium","getGifs","category","a","process","encodeURI","fetch","resp","json","data","gifs","map","item","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAMe,SAASA,EAAT,GAA2D,IAApCC,EAAmC,EAAnCA,cAAmC,EACnCC,mBAAS,IAD0B,mBAChEC,EADgE,KACpDC,EADoD,KAgBvE,OACE,uBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKhB,UACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfrB,SAACP,GACpBF,EAAcE,EAAEQ,OAAOF,UAerB,wBAAQD,KAAK,SAAb,6B,0CCzBOI,EAKX,WAAYC,GAAY,IAAD,2BAJvBC,QAIuB,OAHvBC,WAGuB,OAFvBC,SAEuB,EACrBC,KAAKH,GAAKD,EAAKC,GACfG,KAAKF,MAAQF,EAAKE,MAClBE,KAAKD,IAAL,UAAWH,EAAKK,cAAhB,aAAW,EAAaC,iBAAiBH,KCNhCI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACNC,mCACTP,EAFe,gDAEgCQ,UACnDH,GAHmB,6BACNE,oCADM,SAMFE,MAAMT,GANJ,cAMfU,EANe,gBAOGA,EAAKC,OAPR,uBAObC,EAPa,EAObA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAI,OAAI,IAAInB,EAAQmB,MARrB,kBAUdF,GAVc,4CAAH,sDCAL,SAASG,EAAT,GAA+C,IAAxBjB,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,IAC3C,OACE,sBAAKiB,UAAU,yCAAf,UACE,qBAAKA,UAAU,YAAYC,IAAKlB,EAAKmB,IAAKpB,IAC1C,mBAAGkB,UAAU,cAAb,SAA4BlB,OCCnB,SAASqB,EAAT,GAA8C,IAA3Bf,EAA0B,EAA1BA,SAA0B,ECHrD,SAAsBA,GAAmB,IAAD,EACnBtB,mBAAS,CACjCmB,OAAQ,GACRmB,SAAS,IAHkC,mBACtCC,EADsC,KAC/BC,EAD+B,KAY7C,OANAC,qBAAU,WACRpB,EAAQC,GAAUoB,MAAK,SAAAC,GACrBH,EAAS,CAAErB,OAAQwB,EAAML,SAAS,SAEnC,CAAChB,IAEGiB,EDRqBK,CAAatB,GAAjCH,EADkD,EAClDA,OAAQmB,EAD0C,EAC1CA,QAEhB,OACE,qCACE,6BAAKhB,IACL,qBAAKY,UAAU,YAAf,SACGI,EAAU,aAAenB,EAAOY,KAAI,SAAAC,GAAI,OAAI,cAACC,EAAD,eAA+BD,GAAbA,EAAKjB,YEV7D,SAAS8B,IAAgB,IAAD,EACD7C,mBAAS,CAAC,cADT,mBAC9BQ,EAD8B,KAClBT,EADkB,KAGrC,OACE,qCACE,8CACA,uBAEA,cAACD,EAAD,CAAaC,cAAeA,IAE5B,6BACGS,EAAWuB,KAAI,SAAAT,GAAQ,OACtB,cAACe,EAAD,CAAwBf,SAAUA,GAApBA,WCXxBwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACH,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.d5770400.chunk.js","sourcesContent":["import { ChangeEvent, Dispatch, FormEvent, SetStateAction, useState } from 'react';\n\ninterface AddCategoryProps {\n  setCategories: Dispatch<SetStateAction<string[]>>;\n}\n\nexport default function AddCategory({ setCategories }: AddCategoryProps) {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories(categories => [inputValue, ...categories]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleChange} />\n      <button type=\"submit\">Add Category</button>\n    </form>\n  );\n}\n","export class GifInfo {\n  id: string;\n  title: string;\n  url: string;\n\n  constructor(args: any) {\n    this.id = args.id;\n    this.title = args.title;\n    this.url = args.images?.downsized_medium.url;\n  }\n}\n","import { GifInfo } from '../models/gif-info.model';\n\nexport const getGifs = async (category: string) => {\n  const apiKey = process.env.REACT_APP_GIPHY_APIKEY;\n  const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=${apiKey}`;\n\n  const resp = await fetch(url);\n  const { data } = (await resp.json()) as { data: GifInfo[] };\n  const gifs = data.map(item => new GifInfo(item));\n\n  return gifs;\n};\n","import { GifInfo } from '../models/gif-info.model';\n\nexport default function GifGridItem({ title, url }: GifInfo) {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img className=\"card__img\" src={url} alt={title} />\n      <p className=\"card__title\">{title}</p>\n    </div>\n  );\n}\n","import { useFetchGifs } from '../hooks/use-fetch-gifs.hook';\nimport GifGridItem from './GifGridItem';\n\ninterface GifGridProps {\n  category: string;\n}\n\nexport default function GifGrid({ category }: GifGridProps) {\n  const { images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      <div className=\"card-grid\">\n        {loading ? 'Loading...' : images.map(item => <GifGridItem key={item.id} {...item} />)}\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/get-gifs.helper';\nimport { GifInfo } from '../models/gif-info.model';\n\nexport function useFetchGifs(category: string) {\n  const [state, setState] = useState({\n    images: [] as GifInfo[],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then(imgs => {\n      setState({ images: imgs, loading: false });\n    });\n  }, [category]);\n\n  return state;\n}\n","import { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nexport default function GifExpertApp() {\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <hr />\n\n      <AddCategory setCategories={setCategories} />\n\n      <ol>\n        {categories.map(category => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}